#!/bin/bash

# 🔱 ARCH FORTRESS - PART 2: ARSENAL DEPLOYMENT 🔱

# Fixed Python compatibility and enhanced error handling

set -euo pipefail

# Colors for output

RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
NC="\033[0m"

# Configuration

USERNAME="mastermind"
HOSTNAME="fortress"
FIREFOX_PROFILE="fortress-secure"
DNS_NETWORK="dns-isolated"
FIREFOX_NETWORK="firefox-isolated"

# Logging functions

log() {
echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
echo -e "${RED}[ERROR]${NC} $1" >&2
exit 1
}

warning() {
echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
echo -e "${BLUE}[INFO]${NC} $1"
}

# Verify Part 1 installation

verify_part1() {
log "🔍 Verifying Part 1 installation…"


# Check if we're running as user
if [[ $EUID -eq 0 ]]; then
    error "Do not run Part 2 as root. Run as user $USERNAME"
fi

# Check AppArmor
if ! sudo systemctl is-active apparmor >/dev/null 2>&1; then
    error "AppArmor not running. Check Part 1 installation."
fi

# Check Podman
if ! command -v podman >/dev/null 2>&1; then
    error "Podman not found. Check Part 1 installation."
fi

log "✅ Part 1 verification complete"


}

# Install GPU drivers and CUDA

setup_gpu_cuda() {
log "🎮 Setting up NVIDIA GPU and CUDA…"


# Install NVIDIA drivers
sudo pacman -S --noconfirm \
    nvidia-dkms \
    nvidia-utils \
    nvidia-settings \
    lib32-nvidia-utils \
    cuda \
    cudnn \
    opencl-nvidia

# Configure NVIDIA persistence
sudo systemctl enable nvidia-persistenced

# Add user to video group
sudo usermod -a -G video $USERNAME

# Configure NVIDIA settings
sudo tee /etc/modprobe.d/nvidia.conf > /dev/null << 'EOF'


# Enable NVIDIA KMS

options nvidia-drm modeset=1

# Security hardening

options nvidia NVreg_RestrictProfilingToAdminUsers=1
EOF


# Update initramfs
sudo mkinitcpio -P

log "✅ NVIDIA GPU and CUDA setup complete"


}

# Install minimal KDE Plasma

setup_minimal_kde() {
log "🖥️ Installing minimal KDE Plasma…"


# Install minimal KDE
sudo pacman -S --noconfirm \
    xorg-server \
    plasma-desktop \
    plasma-workspace \
    kscreen \
    plasma-systemmonitor \
    konsole \
    dolphin \
    kate \
    sddm \
    sddm-kcm \
    ark \
    spectacle \
    breeze \
    plasma-browser-integration

# Enable SDDM
sudo systemctl enable sddm

# Configure SDDM for security
sudo tee /etc/sddm.conf > /dev/null << 'EOF'


[General]
HaltCommand=/usr/bin/systemctl poweroff
RebootCommand=/usr/bin/systemctl reboot
Numlock=on

[Theme]
Current=breeze

[Users]
MaximumUid=60513
MinimumUid=1000
HideUsers=
HideShells=/bin/false,/usr/bin/nologin

[X11]
MinimumVT=1
ServerArguments=-nolisten tcp -dpi 96
EOF


# Disable unnecessary KDE services
sudo systemctl mask \
    plasma-baloorunner \
    baloo-file \
    baloo-file-extractor

log "✅ Minimal KDE Plasma installed"


}

# Setup Firefox with AppArmor isolation

setup_firefox_isolation() {
log "🦊 Setting up Firefox with AppArmor isolation…"


# Install Firefox
sudo pacman -S --noconfirm firefox

# Create Firefox AppArmor profile
sudo tee /etc/apparmor.d/firefox-fortress > /dev/null << 'EOF'


# Firefox security profile for Fortress

#include <tunables/global>

profile firefox-fortress /usr/lib/firefox/firefox flags=(attach_disconnected) {
#include <abstractions/base>
#include <abstractions/audio>
#include <abstractions/dbus-session-strict>
#include <abstractions/dbus-accessibility-strict>
#include <abstractions/fonts>
#include <abstractions/freedesktop.org>
#include <abstractions/mesa>
#include <abstractions/nameservice>
#include <abstractions/openssl>
#include <abstractions/p11-kit>
#include <abstractions/ssl_certs>
#include <abstractions/user-tmp>
#include <abstractions/wayland>
#include <abstractions/x11>

owner @{HOME}/.config/dconf/user r,
owner @{HOME}/.cache/fontconfig/ rw,
owner @{HOME}/.cache/fontconfig/** rw,

# Firefox binary and libraries

/usr/lib/firefox/firefox rix,
/usr/lib/firefox/** r,
/usr/lib/firefox/plugin-container ix,
/usr/lib/firefox/firefox-bin rix,

# Firefox profile directory (restricted)

owner @{HOME}/.mozilla/firefox/fortress-secure/** rw,
owner @{HOME}/.mozilla/firefox/profiles.ini r,
owner @{HOME}/.mozilla/firefox/installs.ini r,

# Downloads directory (restricted)

owner @{HOME}/Downloads/firefox/** rw,
owner @{HOME}/Downloads/firefox/ rw,

# System directories (read-only)

/usr/share/firefox/** r,
/usr/share/mime/** r,
/usr/share/applications/** r,
/etc/firefox/** r,
/etc/mime.types r,

# Networking

network inet dgram,
network inet stream,
network inet6 dgram,
network inet6 stream,
network netlink raw,

# Process control

/usr/bin/lsb_release Px,
/usr/bin/basename ix,
/usr/bin/dirname ix,

# Denied access

deny @{HOME}/.ssh/** rw,
deny @{HOME}/.gnupg/** rw,
deny @{HOME}/Documents/** rw,
deny @{HOME}/.config/** rw,
deny @{HOME}/.local/share/** rw,
deny /etc/shadow r,
deny /etc/passwd r,
deny /proc/*/environ r,
deny /sys/devices/virtual/dmi/** r,
deny capability sys_admin,
deny capability sys_ptrace,
deny capability sys_module,

# Temporary files

owner /tmp/firefox-fortress/** rw,
owner /var/tmp/firefox-fortress/** rw,
}
EOF


# Create secure Firefox profile and necessary directories
log "Manually creating secure Firefox profile..."
mkdir -p "$HOME/.mozilla/firefox/fortress-secure"

# Create profiles.ini so Firefox knows about the new profile on first launch
tee "$HOME/.mozilla/firefox/profiles.ini" > /dev/null << 'EOF'
[Install4F96D09476724483]
Default=fortress-secure
Locked=1

[Profile1]
Name=fortress-secure
IsRelative=1
Path=fortress-secure
Default=1

[General]
StartWithLastProfile=1
Version=2
EOF

# Create Firefox user.js for security
tee $HOME/.mozilla/firefox/fortress-secure/user.js > /dev/null << 'EOF'


// Firefox Security Configuration for Fortress
// Disable telemetry and data collection
user_pref("datareporting.policy.dataSubmissionEnabled", false);
user_pref("datareporting.healthreport.uploadEnabled", false);
user_pref("toolkit.telemetry.unified", false);
user_pref("toolkit.telemetry.enabled", false);
user_pref("browser.newtabpage.activity-stream.feeds.telemetry", false);
user_pref("browser.newtabpage.activity-stream.telemetry", false);
user_pref("browser.ping-centre.telemetry", false);

// Disable studies and experiments
user_pref("app.shield.optoutstudies.enabled", false);
user_pref("app.normandy.enabled", false);
user_pref("app.normandy.api_url", "");

// Enhanced security settings
user_pref("security.tls.version.min", 3);
user_pref("security.ssl.require_safe_negotiation", true);
user_pref("security.ssl.treat_unsafe_negotiation_as_broken", true);
user_pref("security.tls.insecure_fallback_hosts", "");
user_pref("security.cert_pinning.enforcement_level", 2);

// Privacy enhancements
user_pref("privacy.trackingprotection.enabled", true);
user_pref("privacy.trackingprotection.socialtracking.enabled", true);
user_pref("privacy.resistFingerprinting", true);
user_pref("privacy.firstparty.isolate", true);
user_pref("network.cookie.cookieBehavior", 1);
user_pref("network.http.referer.XOriginPolicy", 1);

// Disable dangerous features
user_pref("javascript.options.wasm", false);
user_pref("dom.webnotifications.enabled", false);
user_pref("geo.enabled", false);
user_pref("media.navigator.enabled", false);
user_pref("webgl.disabled", true);

// Network isolation
user_pref("network.proxy.type", 0);
user_pref("network.dns.disablePrefetch", true);
user_pref("network.prefetch-next", false);
user_pref("network.predictor.enabled", false);
EOF


# Load Firefox AppArmor profile
sudo apparmor_parser -r /etc/apparmor.d/firefox-fortress

# Create Firefox launcher script
mkdir -p $HOME/.local/bin
tee $HOME/.local/bin/firefox-fortress > /dev/null << 'EOF'


#!/bin/bash

# Launcher to enforce AppArmor profile on host Firefox

exec aa-exec -p firefox-fortress /usr/lib/firefox/firefox "$@"
EOF


chmod +x $HOME/.local/bin/firefox-fortress

log "✅ Firefox isolation configured"


}

# Setup development environment with proper Python version management

setup_development() {
log "💻 Setting up development environment…"
export PATH="$HOME/.local/bin:$PATH"


# Install development tools including pyenv for Python version management
sudo pacman -S --noconfirm \
    base-devel \
    python \
    python-pip \
    nodejs \
    npm \
    go \
    podman-compose \
    github-cli \
    git \
    vim \
    tk \
    zlib \
    openssl \
    readline \
    sqlite \
    curl \
    llvm \
    ncurses \
    xz \
    libffi \
    libyaml

# Install Rust
sudo pacman -S --needed --noconfirm rustup
rustup default stable

# Install paru (AUR helper) more securely
if ! command -v paru >/dev/null 2>&1; then
    log "Installing paru AUR helper..."
    cd /tmp
    git clone https://aur.archlinux.org/paru.git
    cd paru
    makepkg -si --noconfirm
    cd ~
    rm -rf /tmp/paru
fi

# Install VSCodium (telemetry-free VS Code)
paru -S --noconfirm vscodium-bin

# Create development directories
mkdir -p $HOME/{Projects,AI,Scripts}

# Configure Git
git config --global init.defaultBranch main
git config --global pull.rebase true
git config --global core.editor vim

# Install pyenv for Python version management
log "Installing pyenv for Python version management..."
if [[ ! -d "$HOME/.pyenv" ]]; then
    curl https://pyenv.run | bash
    
    # Add pyenv to PATH
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
    echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
    echo 'eval "$(pyenv init -)"' >> ~/.bashrc
    
    # Source for current session
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

# Install Python 3.11 (compatible with TensorFlow and PyTorch)
log "Installing Python 3.11 for ML/AI development..."
pyenv install 3.11.7
pyenv global 3.11.7

# Refresh shell environment
export PATH="$HOME/.pyenv/shims:$PATH"

# Verify Python version
python_version=$(python --version 2>&1)
log "Using Python: $python_version"

# Create Python development environment with compatible versions
log "Creating development environment with ML/AI packages..."
python -m venv $HOME/.local/share/dev-env
source $HOME/.local/share/dev-env/bin/activate

# Upgrade pip first
pip install --upgrade pip setuptools wheel

# Install packages in order of dependency complexity
log "Installing core Python packages..."
pip install numpy scipy

log "Installing data science packages..."
pip install pandas matplotlib seaborn plotly ipython jupyter

log "Installing ML/AI packages..."
pip install scikit-learn

log "Installing PyTorch (CPU version for compatibility)..."
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

log "Installing TensorFlow..."
pip install tensorflow

log "Installing additional development tools..."
pip install black flake8 pylint pytest mypy

# Create activation script
tee $HOME/.local/bin/dev-activate > /dev/null << 'EOF'


#!/bin/bash

# Activate development environment

source $HOME/.local/share/dev-env/bin/activate
echo "🐍 Development environment activated!"
echo "Python: $(python --version)"
echo "Packages: $(pip list | wc -l) installed"
EOF


chmod +x $HOME/.local/bin/dev-activate

log "✅ Development environment configured with Python 3.11"
info "Use 'dev-activate' or 'source ~/.local/share/dev-env/bin/activate' to activate"


}

# Setup Obsidian with Syncthing

setup_obsidian_syncthing() {
log "📝 Setting up Obsidian with Syncthing…"


# Install Obsidian and Syncthing
paru -S --noconfirm obsidian syncthing

# Create Obsidian vault directory
mkdir -p $HOME/Documents/ObsidianVault

# Create Obsidian AppArmor profile
sudo tee /etc/apparmor.d/obsidian > /dev/null << 'EOF'


# Obsidian security profile

#include <tunables/global>

profile obsidian /opt/Obsidian/obsidian flags=(attach_disconnected) {
#include <abstractions/base>
#include <abstractions/fonts>
#include <abstractions/freedesktop.org>
#include <abstractions/user-tmp>
#include <abstractions/wayland>
#include <abstractions/x11>

owner @{HOME}/.config/dconf/user r,
owner @{HOME}/.cache/fontconfig/ rw,
owner @{HOME}/.cache/fontconfig/** rw,

# Obsidian binary and libraries

/opt/Obsidian/obsidian rix,
/opt/Obsidian/** r,

# Vault access (restricted to vault directory)

owner @{HOME}/Documents/ObsidianVault/** rw,
owner @{HOME}/.config/obsidian/** rw,

# System directories (read-only)

/usr/share/applications/** r,
/usr/share/mime/** r,

# Networking (required for sync and plugins)

network inet dgram,
network inet stream,
network inet6 dgram,
network inet6 stream,

# Deny sensitive directories

deny @{HOME}/.ssh/** rw,
deny @{HOME}/.gnupg/** rw,
deny capability sys_admin,
deny capability sys_ptrace,
deny capability sys_module,
}
EOF


# Load Obsidian AppArmor profile
sudo apparmor_parser -r /etc/apparmor.d/obsidian

# Configure Syncthing
systemctl --user enable syncthing.service
systemctl --user start syncthing.service

# Create Syncthing AppArmor profile
sudo tee /etc/apparmor.d/syncthing > /dev/null << 'EOF'


# Syncthing security profile

#include <tunables/global>

profile syncthing /usr/bin/syncthing flags=(attach_disconnected) {
#include <abstractions/base>
#include <abstractions/nameservice>
#include <abstractions/openssl>

# Syncthing binary

/usr/bin/syncthing rix,

# Configuration and data

owner @{HOME}/.config/syncthing/** rw,
owner @{HOME}/.local/share/syncthing/** rw,
owner @{HOME}/Documents/ObsidianVault/** rw,

# Network access for sync

network inet dgram,
network inet stream,
network inet6 dgram,
network inet6 stream,

# Deny sensitive directories

deny @{HOME}/.ssh/** rw,
deny @{HOME}/.gnupg/** rw,
deny capability sys_admin,
deny capability sys_ptrace,
deny capability sys_module,
}
EOF


# Load Syncthing AppArmor profile
sudo apparmor_parser -r /etc/apparmor.d/syncthing

log "✅ Obsidian and Syncthing configured"
info "Access Syncthing at: http://127.0.0.1:8384"


}

setup_secure_dns() {
    log "🔥 Forging the Definitive Purist DNS Stack..."

    # 1. Install components
    log "Installing dnsmasq and dnscrypt-proxy..."
    sudo pacman -S --needed --noconfirm dnsmasq dnscrypt-proxy

    # 2. Eradicate systemd-resolved to prevent conflicts
    log "Disabling and masking systemd-resolved..."
    sudo systemctl disable --now systemd-resolved.service 2>/dev/null || true
    sudo systemctl mask systemd-resolved.service

    # 3. Configure dnscrypt-proxy: The Anonymizing Backend
    log "Configuring dnscrypt-proxy for maximum anonymity and security..."
    sudo tee /etc/dnscrypt-proxy/dnscrypt-proxy.toml > /dev/null << 'EOF'
# --- CORE STRATEGY: UNWAVERING ANONYMITY ---
# Routes are a brittle, manual alternative and have been REMOVED.
anonymize_dns = true

# --- MINIMALIST TRUST: CURATED SERVER LIST ---
# Using high-quality, logging-free, DNSSEC-enabled servers.
server_names = ['quad9-dnscrypt-ip4-filter-pri', 'dnsforge.de', 'scaleway-fr', 'cloudflare']

# --- TECHNICAL & SECURITY HARDENING ---
listen_addresses = ['127.0.0.1:5354'] # High port for dnsmasq
require_dnssec = true
require_nolog = true
require_nofilter = false # Allows high-quality filtering servers like Quad9
dnscrypt_servers = true  # REQUIRED for anonymization
doh_servers = false      # Disabled for protocol purity
cache = false            # Correctly disabled; dnsmasq will handle caching
fallback_resolver = '9.9.9.9:53' # For initial bootstrap
ipv4_servers = true
ipv6_servers = false     # SAFER: Prevents leaks on non-IPv6 networks
EOF

    # 4. Configure dnsmasq: The Smart Caching & Blocking Frontend
    log "Configuring dnsmasq as the local caching resolver..."
    sudo tee /etc/dnsmasq.conf > /dev/null << 'EOF'
# INTERFACES: Listen only on loopback
listen-address=127.0.0.1
port=53
bind-interfaces

# UPSTREAM: Forward ALL queries to our secure, anonymizing backend
server=127.0.0.1#5354
no-resolv

# SECURITY: Enable DNSSEC validation and block junk requests
dnssec
bogus-priv

# LOCAL NETWORK: For resolving local hostnames like 'fortress.lan'
domain=lan
expand-hosts

# BLOCKING: Use a dedicated, dynamically updated blocklist
conf-file=/etc/dnsmasq-blocklist.conf

# PERFORMANCE & CACHING: A large cache for a snappy experience
cache-size=10000
EOF

    # 5. Create the Blocklist Update Mechanism
    log "Setting up systemd timer for daily ad/malware blocklist updates..."
    sudo tee /usr/local/bin/update-dns-blocklist > /dev/null << 'EOF'
#!/bin/bash
BLOCKLIST_PATH="/etc/dnsmasq-blocklist.conf"
TEMP_FILE=$(mktemp)

# Download and process multiple sources into the efficient 'address=/.example.com/0.0.0.0' format
# This format is significantly faster for dnsmasq than a huge hosts file.
{
    curl -sS --fail "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts" | awk '/^0\.0\.0\.0/ {print "address=/."$2"/0.0.0.0"}'
    curl -sS --fail "https://mirror1.malwaredomains.com/files/justdomains" | sed 's/^/address=&\/0.0.0.0/'
} | sort -u > "$TEMP_FILE"

if [ -s "$TEMP_FILE" ]; then
    mv "$TEMP_FILE" "$BLOCKLIST_PATH"
    logger "DNS blocklist updated: $(wc -l < "$BLOCKLIST_PATH") rules applied."
    # Reload dnsmasq to apply the new list without dropping connections
    systemctl reload dnsmasq.service
else
    logger "DNS blocklist update failed."
    rm -f "$TEMP_FILE"
    exit 1
fi
rm -f "$TEMP_FILE"
EOF
    sudo chmod +x /usr/local/bin/update-dns-blocklist
    log "Running initial blocklist update..."
    sudo /usr/local/bin/update-dns-blocklist

    # Systemd Timer to replace cron
    sudo tee /etc/systemd/system/update-dns-blocklist.service > /dev/null << 'EOSERVICE'
[Unit]
Description=Update DNS blocklist for dnsmasq
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/update-dns-blocklist
EOSERVICE

    sudo tee /etc/systemd/system/update-dns-blocklist.timer > /dev/null << 'EOTIMER'
[Unit]
Description=Run dnsmasq blocklist update daily

[Timer]
OnCalendar=daily
RandomizedDelaySec=6h
Persistent=true

[Install]
WantedBy=timers.target
EOTIMER

    sudo systemctl enable --now update-dns-blocklist.timer

    # 6. Configure NetworkManager to USE the new stack
    log "Configuring NetworkManager to use dnsmasq..."
    sudo tee /etc/NetworkManager/conf.d/99-dns.conf > /dev/null << 'EOF'
# Use dnsmasq as the DNS plugin for NetworkManager.
# This ensures all network connections automatically use our secure setup.
[main]
dns=dnsmasq
EOF

    # 7. DNS LEAK PROTECTION via firewalld
    log "Hardening firewall to prevent DNS leaks..."
    # This is the most critical step. It ensures NO process can make DNS queries
    # directly, bypassing our secure chain. Only dnscrypt-proxy is allowed out.
    id dnscrypt-proxy &>/dev/null || sudo useradd -r -s /bin/false dnscrypt-proxy
    sudo firewall-cmd --permanent --zone=public --remove-service=dhcpv6-client
    sudo firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 ! -d 127.0.0.1 -p udp --dport 53 -j REJECT
    sudo firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 ! -d 127.0.0.1 -p tcp --dport 53 -j REJECT
    sudo firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 1 -m owner --uid-owner dnscrypt-proxy -j ACCEPT
    sudo firewall-cmd --reload

    # 8. Start and Enable the full stack
    log "Restarting network stack to apply all changes..."
    sudo systemctl enable --now dnscrypt-proxy.service dnsmasq.service
    sudo systemctl restart NetworkManager.service

    # 9. Verify the entire chain
    log "Verifying DNS resolution..."
    sleep 5 # Give services a moment to start
    if dig @127.0.0.1 +short google.com >/dev/null 2>&1; then
        log "✅ Definitive DNS Stack is ACTIVE. All DNS traffic is now anonymized and filtered."
    else
        error "❌ DNS chain is broken. Check dnscrypt-proxy and dnsmasq service logs."
        exit 1
    fi
}

# Setup Snapper for snapshots

setup_snapper() {
log "📸 Setting up Snapper for snapshots…"


# Install Snapper
sudo pacman -S --noconfirm snapper snap-pac

# Create Snapper configuration for root
sudo snapper -c root create-config /

# Create Snapper configuration for home
sudo snapper -c home create-config /home

# Configure Snapper settings for both root and home
for config in root home; do
    log "🔧 Configuring Snapper for '$config'..."
    sudo snapper -c "$config" set-config \
        "TIMELINE_CREATE=yes" \
        "TIMELINE_LIMIT_HOURLY=5" \
        "TIMELINE_LIMIT_DAILY=7" \
        "TIMELINE_LIMIT_WEEKLY=0" \
        "TIMELINE_LIMIT_MONTHLY=2" \
        "NUMBER_CLEANUP=yes" \
        "NUMBER_LIMIT=25" \
        "NUMBER_LIMIT_IMPORTANT=10"
done

# Enable Snapper timers
sudo systemctl enable --now snapper-timeline.timer
sudo systemctl enable --now snapper-cleanup.timer

# Create initial snapshot
sudo snapper -c root create --description "Initial fortress snapshot"

log "✅ Snapper configured"


}

# Setup system monitoring

setup_monitoring() {
log "📊 Setting up system monitoring…"


# Install monitoring tools
sudo pacman -S --noconfirm \
    htop \
    iotop \
    nethogs \
    fail2ban \
    logwatch \
    rkhunter

# Configure fail2ban
sudo tee /etc/fail2ban/jail.local > /dev/null << 'EOF'


[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3
backend = systemd
usedns = warn
logencoding = auto
enabled = false
filter = %(**name**)s
destemail = root@localhost
sender = root@localhost
action = %(action_)s

[sshd]
enabled = true
port = ssh
logpath = %(sshd_log)s
backend = %(sshd_backend)s
banaction = firewallcmd-multiport
EOF


# Enable fail2ban
sudo systemctl enable --now fail2ban

# Configure rkhunter
sudo rkhunter --update
sudo rkhunter --propupd

# Create monitoring script
tee $HOME/.local/bin/fortress-status > /dev/null << 'EOF'


#!/bin/bash

# Fortress System Status

echo "🔱 FORTRESS STATUS REPORT 🔱"
echo "=================================="
echo

echo "📊 System Resources:"
echo "CPU: $(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage "%"}')"
echo "Memory: $(free | grep Mem | awk '{printf("%.1f%%\n", $3/$2 * 100.0)}')"
echo "Disk: $(df -h / | awk 'NR==2{print $5}')"
echo

echo "🔒 Security Status:"
echo "AppArmor: $(sudo apparmor_status | grep -c 'profiles are loaded')"
echo "Firewall: $(sudo firewall-cmd --state 2>/dev/null || echo 'inactive')"
echo "Fail2ban: $(sudo fail2ban-client status | grep -c 'jail(s)')"
echo

echo "🐳 Container Status:"
podman ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
echo

echo "📸 Recent Snapshots:"
sudo snapper -c root list -t single | tail -5
echo

echo "🐍 Python Environments:"
echo "System Python: $(python --version 2>/dev/null || echo 'Not available')"
if [[ -f "$HOME/.local/share/dev-env/bin/python" ]]; then
echo "Dev Environment: $($HOME/.local/share/dev-env/bin/python --version)"
fi
EOF


chmod +x $HOME/.local/bin/fortress-status

log "✅ System monitoring configured"


}

# Setup MAC address randomization

setup_mac_randomization() {
log "🔒 Configuring MAC address randomization…"


# Create a NetworkManager configuration file for MAC randomization
sudo tee /etc/NetworkManager/conf.d/00-macrandomize.conf > /dev/null << 'EOF'


# Enable MAC address randomization for privacy

[device]

# Randomize MAC address during Wi-Fi scans

wifi.scan-rand-mac-address=yes

[connection]

# Use a stable, per-network random MAC address for Wi-Fi

wifi.cloned-mac-address=stable

# Use a stable, random MAC address for Ethernet

ethernet.cloned-mac-address=stable

# Generate a stable ID for connections

connection.stable-id=${CONNECTION}/${BOOT}
EOF


log "✅ MAC address randomization enabled for new connections."
info "Existing connections may need to be modified with 'nmcli'."


}

# Apply final security hardening

apply_final_hardening() {
log "🔐 Applying final security hardening…"


# Create security aliases
tee -a $HOME/.bashrc > /dev/null << 'EOF'


# Fortress Security Aliases

alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'
alias firefox='firefox-fortress'
alias status='fortress-status'
alias ss='sudo snapper -c root create --description'
alias sr='sudo snapper -c root'

# Security-focused PATH

export PATH="$HOME/.local/bin:$PATH"

# Development environment

alias dev='dev-activate'
alias dev-env='source $HOME/.local/share/dev-env/bin/activate'

EOF


# Set proper permissions
chmod 700 $HOME/.ssh 2>/dev/null || true
chmod 600 $HOME/.ssh/* 2>/dev/null || true
chmod 700 $HOME/.gnupg 2>/dev/null || true
chmod 600 $HOME/.gnupg/* 2>/dev/null || true


}

# Main installation function

main() {
log "🔱 Starting Arch Fortress Installation - Part 2 🔱"


# Verify Part 1 installation
verify_part1

# GPU and KDE setup
setup_gpu_cuda
setup_minimal_kde

# Application isolation
setup_firefox_isolation
setup_obsidian_syncthing

# Development environment (with fixed Python compatibility)
setup_development

# Dnscrypt proxy plus dnsmasq. firewalld. timer
setup_secure_dns

# System maintenance
setup_snapper
setup_monitoring

# Final hardening
setup_mac_randomization
apply_final_hardening

log "✅ Enabling Podman auto-update for containers..."
systemctl --user enable --now podman-auto-update.timer
podman auto-update

log "🎉 Arch Fortress Part 2 Installation Complete! 🎉"
log "📋 Next steps:"
log "   1. Reboot to load GPU drivers and KDE"
log "   2. Set up Syncthing at http://127.0.0.1:8384"
log "   3. Run 'fortress-status' to check system"
log "   4. Use 'firefox-fortress' for secure browsing"
log "   5. Use 'dev-activate' to enter ML/AI development environment"

info "🐍 Python Environment Details:"
info "   - System Python: $(python --version 2>/dev/null || echo 'Not available')"
info "   - Development Environment: Python 3.11 with ML/AI packages"
info "   - Activation: 'dev-activate' or 'source ~/.local/share/dev-env/bin/activate'"

info "🛡️ Security Features:"
info "   - AppArmor profiles for Firefox, Obsidian and Syncthing"
info "   - MAC address randomization"
info "   - Container isolation with custom networks"
info "   - Snapshot system with automatic cleanup"
info "   - Real-time security monitoring with fail2ban"

info "🚀 Performance Optimizations:"
info "   - NVIDIA GPU acceleration enabled"
info "   - Minimal KDE desktop environment"
info "   - Optimized container resource limits"

warning "⚠️  IMPORTANT SECURITY NOTES:"
warning "   - Review and customize AppArmor profiles as needed"
warning "   - Set up firewall rules for your specific use case"
warning "   - Consider enabling full disk encryption if not already done"

log "🔧 Post-installation hardening recommendations:"
log "   - Run 'sudo rkhunter --check' for rootkit detection"
log "   - Configure automatic security updates"
log "   - Set up encrypted backup strategy"
log "   - Review systemd services and disable unnecessary ones"

# Create post-installation hardening script

tee $HOME/.local/bin/fortress-harden > /dev/null << 'EOF'
#!/bin/bash

# 🔱 FORTRESS POST-INSTALLATION HARDENING 🔱

set -euo pipefail

GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[1;33m"
NC="\033[0m"

log() { echo -e "${GREEN}[HARDEN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

log "🔒 Running additional security hardening…"

# Disable unnecessary systemd services

log "Disabling unnecessary services…"
sudo systemctl disable --now bluetooth.service 2>/dev/null || true
sudo systemctl disable --now cups.service 2>/dev/null || true
sudo systemctl mask systemd-rfkill.service systemd-rfkill.socket 2>/dev/null || true

# Enable process accounting

log "Enabling process accounting…"
sudo systemctl enable --now psacct 2>/dev/null || true

# Create emergency recovery script

log "Creating emergency recovery tools…"
sudo tee /usr/local/bin/fortress-emergency > /dev/null << 'EOEMERG'
#!/bin/bash

# 🚨 FORTRESS EMERGENCY RECOVERY 🚨

RED="\033[0;31m"
GREEN="\033[0;32m"
NC="\033[0m"

echo -e "${RED}🚨 FORTRESS EMERGENCY MODE 🚨${NC}"
echo "Available recovery options:"
echo "1. Disable all AppArmor profiles"
echo "2. Stop all containers"
echo "3. Reset DNS to system default"
echo "4. List recent snapshots"
echo "5. Boot to snapshot"

read -p "Select option (1-5): " choice

case $choice in
1)
    echo -e "${GREEN}Disabling AppArmor profiles (setting to complain mode)...${NC}"
    sudo aa-complain /etc/apparmor.d/*
    log "AppArmor profiles set to complain mode. Reboot to take full effect."
    ;;
2)
    echo -e "${GREEN}Stopping all containers...${NC}"
    podman stop --all
    podman system prune -f --volumes
    ;;
3)
    echo -e "${GREEN}Resetting DNS to a public resolver (1.1.1.1)...${NC}"
    sudo systemctl stop systemd-resolved
    echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
    sudo systemctl start systemd-resolved
    log "DNS has been reset."
    ;;
4)
    echo -e "${GREEN}Recent snapshots:${NC}"
    sudo snapper -c root list | tail -10
    ;;
5)
    echo -e "${RED}This is a destructive operation.${NC}"
    warning "This will roll back your ENTIRE root filesystem."
    read -p "Enter snapshot number to restore: " snap_num
    if [[ ! "$snap_num" =~ ^[0-9]+$ ]]; then error "Invalid number."; fi

    warning "Restoring snapshot $snap_num. The system will reboot."
    sudo snapper -c root rollback "$snap_num" && sudo reboot
    ;;
*)
    error "Invalid option"
    ;;
esac
EOEMERG

sudo chmod +x /usr/local/bin/fortress-emergency

# Set up intrusion detection alerts

log "Configuring intrusion detection…"
sudo tee /etc/fail2ban/action.d/fortress-alert.conf > /dev/null << 'EOALERT'
[Definition]
actionstart = echo "Fortress: fail2ban started on `hostname` at `date`" | logger -t fail2ban
actionstop = echo "Fortress: fail2ban stopped on `hostname` at `date`" | logger -t fail2ban
actioncheck =
actionban = echo "Fortress: banned <ip> from `hostname` at `date`" | logger -t fail2ban
actionunban = echo "Fortress: unbanned <ip> from `hostname` at `date`" | logger -t fail2ban

[Init]
init = 123
EOALERT

# Update fail2ban config to use alerts

sudo sed -i 's/action = %(action_)s/action = %(action_)s\n         fortress-alert/' /etc/fail2ban/jail.local
sudo systemctl restart fail2ban

log "✅ Additional hardening complete!"
warning "Run 'fortress-emergency' if you encounter critical issues"
EOF

chmod +x $HOME/.local/bin/fortress-harden

# Create system integrity checker

tee $HOME/.local/bin/fortress-check > /dev/null << 'EOF'
#!/bin/bash

# 🔱 FORTRESS INTEGRITY CHECKER 🔱

set -euo pipefail

GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
NC="\033[0m"

log() { echo -e "${GREEN}[CHECK]${NC} $1"; }
error() { echo -e "${RED}[FAIL]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARN]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

ERRORS=0

check_service() {
if systemctl --user is-active --quiet "$1" 2>/dev/null; then
log "$1 is running"
else
error "$1 is not running"
((ERRORS++))
fi
}

check_system_service() {
if sudo systemctl is-active --quiet "$1" 2>/dev/null; then
log "$1 is running"
else
error "$1 is not running"
((ERRORS++))
fi
}

echo "🔱 FORTRESS INTEGRITY CHECK 🔱"
echo "================================"

log "Checking core services…"
check_system_service apparmor
check_system_service fail2ban
check_system_service systemd-resolved

log "Checking user services…"
check_service syncthing.service

log "Checking AppArmor profiles…"
PROFILES=$(sudo apparmor_status | grep -c "profiles are loaded" || echo "0")
if [[ $PROFILES -gt 0 ]]; then
log "$PROFILES AppArmor profiles loaded"
else
error "No AppArmor profiles loaded"
((ERRORS++))
fi

log "Checking DNS resolution…"
if nslookup google.com 127.0.0.1 >/dev/null 2>&1; then
log "DNS resolution working"
else
error "DNS resolution failed"
((ERRORS++))
fi

log "Checking development environment…"
if [[ -f "$HOME/.local/share/dev-env/bin/python" ]]; then
log "Development environment exists"
PYTHON_VERSION=$($HOME/.local/share/dev-env/bin/python --version)
info "Python: $PYTHON_VERSION"
else
warning "Development environment not found"
fi

log "Checking security tools…"
if command -v rkhunter >/dev/null; then
log "Rootkit hunter available"
else
warning "Rootkit hunter not installed"
fi

echo "================================"
if [[ $ERRORS -eq 0 ]]; then
log "🎉 All checks passed! Fortress is secure."
else
error "❌ $ERRORS issues found. Run 'fortress-harden' to fix."
fi

echo
info "💡 Pro Tips:"
info "   • Run this check weekly: 'fortress-check'"
info "   • Monitor logs: 'journalctl -f'"
info "   • Check snapshots: 'sudo snapper -c root list'"
info "   • Update containers: 'podman auto-update'"
EOF

chmod +x $HOME/.local/bin/fortress-check

# Final system verification

log "Running system verification…"

# Check all created files exist

CRITICAL_FILES=(
"$HOME/.local/bin/fortress-status"
"$HOME/.local/bin/fortress-check"
"$HOME/.local/bin/fortress-harden"
"$HOME/.local/bin/firefox-fortress"
"$HOME/.local/bin/dev-activate"
)

for file in "${CRITICAL_FILES[@]}"; do
if [[ -f "$file" && -x "$file" ]]; then
log "✓ $file exists and is executable"
else
error "✗ $file missing or not executable"
fi
done

# Verify AppArmor profiles

APPARMOR_PROFILES=(
"/etc/apparmor.d/firefox-fortress"
"/etc/apparmor.d/obsidian"
"/etc/apparmor.d/syncthing"
)

for profile in "${APPARMOR_PROFILES[@]}"; do
if [[ -f "$profile" ]]; then
log "✓ AppArmor profile $profile installed"
else
error "✗ AppArmor profile $profile missing"
fi
done

# Update shell configuration for immediate use

source $HOME/.bashrc 2>/dev/null || true

log "🎯 FORTRESS DEPLOYMENT COMPLETE! 🎯"
echo
log "🚀 IMMEDIATE NEXT STEPS:"
log "   1. REBOOT NOW: 'sudo reboot'"
log "   2. After reboot, run: 'fortress-check'"
log "   3. Configure DNS: http://127.0.0.1:5380 (user: admin, pass: admin)"
log "   4. Configure sync: http://127.0.0.1:8384"
log "   5. Run hardening: 'fortress-harden'"

echo
warning "🔐 SECURITY CHECKLIST:"
warning "   □ Configure firewall rules for your network"
warning "   □ Set up encrypted backups"
warning "   □ Test emergency recovery: 'fortress-emergency'"
warning "   □ Schedule regular security audits"

echo
info "🛠️ DAILY COMMANDS:"
info "   fortress-status  - System overview"
info "   fortress-check   - Integrity verification"  
info "   firefox-fortress - Secure browser"
info "   dev-activate     - ML/AI environment"

echo
log "🎉 Welcome to your impenetrable Arch Fortress! 🎉"
log "    You now have enterprise-grade security on a desktop system."
log "    Stay vigilant. Stay secure. 🔱"

# Create a completion marker

touch $HOME/.fortress-part2-complete
echo "$(date)" > $HOME/.fortress-part2-complete

}

# Execute main function

main "$@"
