# Setup dns
setup_fortress_dns() {
    log "🛡️ FORTRESS DNS: Deploying Production Hardened & Sovereign Setup..."

    # --- DYNAMIC PERFORMANCE TUNING ---
    # Dynamically determine system resources for optimal Unbound performance.
    local CPU_THREADS
    CPU_THREADS=$(nproc)
    # Cache slabs should be a power of 2 near the thread count to reduce lock contention.
    # For simplicity and effectiveness, we will set it equal to the thread count,
    # as this is a common and robust practice.
    local CACHE_SLABS=$CPU_THREADS
    info "System detected with $CPU_THREADS CPU threads. Tuning Unbound accordingly."

    # --- INSTALLATION ---
    log "Installing Unbound and DNSCrypt-Proxy..."
    sudo pacman -S --needed --noconfirm unbound dnscrypt-proxy

    # --- CONFIGURATION: DNSCrypt-Proxy (The Armored Transport) ---
    log "Configuring dnscrypt-proxy for mandatory Oblivious DoH transport..."
    sudo tee /etc/dnscrypt-proxy/dnscrypt-proxy.toml > /dev/null << 'EOF'
# This instance is ONLY for Unbound's recursive lookups.
# It is a stateless transport layer. Caching is disabled.
server_names = ['odoh-ibksturm', 'odoh-cloudflare', 'odoh-quad9-de', 'odoh-securedns-eu']

# --- MANDATORY ODoH ROUTING ---
# Force queries through anonymizing relays. If a relay fails, the query fails. No fallback.
# This ensures the client IP is always decoupled from the DNS resolver.
routes = [
    { server_name = 'odoh-ibksturm',   via = ['odohrelay-ams', 'odohrelay-se'] },
    { server_name = 'odoh-cloudflare', via = ['odohrelay-se', 'odohrelay-ams'] },
    { server_name = 'odoh-quad9-de',   via = ['odohrelay-ams', 'odohrelay-ch'] },
    { server_name = 'odoh-securedns-eu', via = ['odohrelay-ch', 'odohrelay-se'] }
]

# Listen on a high local port for Unbound to connect to.
# This is for local inter-process communication only.
listen_addresses = ['127.0.0.1:5353', '[::1]:5353']

# Caching is DISABLED. Unbound is the sole cache authority in this stack.
# Enabling cache here would lead to stale data and unpredictable TTLs.
cache = false

# Security First: Require DNSSEC validation, no logs, and no filtering from the upstream resolver.
# Unbound handles DNSSEC validation locally, and we handle filtering via blocklists.
require_dnssec = true
require_nolog = true
require_nofilter = true

# Use modern, privacy-preserving protocols ONLY.
doh_servers = true
odoh_servers = true
dnscrypt_servers = false
dot_servers = false

# Performance and reliability tuning.
timeout = 5000
keepalive = 30
lb_strategy = 'p2'
lb_estimator = true

# Privacy settings.
block_unqualified = true
block_undelegated = true

# Bootstrap with trusted public resolvers. This is only for the initial startup of dnscrypt-proxy.
bootstrap_resolvers = ['9.9.9.9:53', '1.1.1.1:53']
ignore_system_dns = true

# Suppress operational logs for privacy and to reduce disk I/O.
log_level = 0
EOF

    # --- CONFIGURATION: Unbound (The Sovereign Resolver) ---
    log "Configuring Unbound as a hardened, caching, recursive resolver..."
    # Note: The 'heredoc' uses 'EOF' to prevent shell expansion of variables like $CPU_THREADS.
    # We will use sed to substitute the dynamic values after writing the template.
    sudo tee /etc/unbound/unbound.conf > /dev/null << 'EOF'
server:
    # Service configuration
    interface: 127.0.0.1@53
    interface: ::1@53
    do-ip4: yes
    do-ip6: yes
    do-udp: yes
    do-tcp: yes
    access-control: 127.0.0.0/8 allow
    access-control: ::1/128 allow
    # Enable socket reuse for high performance on multi-core Linux systems.
    so-reuseport: yes

    # --- DYNAMIC PERFORMANCE TUNING ---
    # These values will be replaced by the script.
    num-threads: __CPU_THREADS__
    msg-cache-slabs: __CACHE_SLABS__
    rrset-cache-slabs: __CACHE_SLABS__
    infra-cache-slabs: __CACHE_SLABS__
    key-cache-slabs: __CACHE_SLABS__

    # --- STATIC PERFORMANCE & CACHE TUNING ---
    # Allocate generous cache sizes. Total memory usage will be ~2-2.5x this amount.
    msg-cache-size: 128m
    rrset-cache-size: 256m
    # Handle high query loads without dropping packets. Requires libevent (default on Arch).
    outgoing-range: 8192
    num-queries-per-thread: 4096
    # Increase kernel socket buffer to avoid drops during traffic spikes.
    so-rcvbuf: 4m
    so-sndbuf: 4m

    # Caching Behavior - Balanced for performance and freshness.
    cache-min-ttl: 0        # Respect the record's TTL.
    cache-max-ttl: 86400    # Cache for a maximum of 1 day.
    serve-expired: yes      # Serve stale data if resolvers are unreachable (improves resilience).
    serve-expired-ttl: 3600 # But only for up to an hour.
    prefetch: yes           # Proactively fetch popular items before they expire.
    prefetch-key: yes       # Proactively fetch DNSKEYs.

    # --- DNSSEC: Authoritative Local Validation ---
    auto-trust-anchor-file: "/var/lib/unbound/root.key"
    val-clean-additional: yes
    harden-dnssec-stripped: yes

    # --- SECURITY & PRIVACY HARDENING ---
    hide-identity: yes
    hide-version: yes
    harden-glue: yes
    harden-below-nxdomain: yes
    # CRITICAL: Harden referral path to validate NS records in the chain of trust.
    # This prevents sophisticated redirection attacks. Aligns with Fortress philosophy.
    harden-referral-path: yes
    qname-minimisation: yes
    qname-minimisation-strict: yes
    aggressive-nsec: yes
    use-caps-for-id: yes
    unwanted-reply-threshold: 10000000

    # Anti-DNS Rebinding Protection.
    private-address: 10.0.0.0/8
    private-address: 172.16.0.0/12
    private-address: 192.168.0.0/16
    private-address: 169.254.0.0/16
    private-address: fd00::/8
    private-address: fe80::/10

    # --- FORWARDING CONFIGURATION ---
    # This is the core logic: forward ALL queries to our local, plaintext dnscrypt-proxy listener.
    # DO NOT use 'ssl-upstream: yes' here. That would cause a fatal protocol mismatch.
    do-not-query-localhost: no
    forward-zone:
        name: "."
        forward-addr: 127.0.0.1@5353
        forward-addr: ::1@5353

    # Include user-defined block and white lists.
    include: "/etc/unbound/user_lists.conf"
EOF

    # Substitute the dynamic performance values into the Unbound config file.
    sudo sed -i "s/__CPU_THREADS__/$CPU_THREADS/g" /etc/unbound/unbound.conf
    sudo sed -i "s/__CACHE_SLABS__/$CACHE_SLABS/g" /etc/unbound/unbound.conf

    # --- PREPARATION: Clear the ground ---
    log "Disabling and masking conflicting DNS services..."
    sudo systemctl disable --now systemd-resolved dnsmasq 2>/dev/null || true
    sudo systemctl mask systemd-resolved.service

    # --- BLOCKLISTING ---
    log "Installing robust, self-updating blocklist mechanism..."
    sudo tee /usr/local/bin/update-dns-blocklist > /dev/null << 'EOF'
#!/bin/bash
set -euo pipefail

BLOCKLIST_PATH="/etc/unbound/blocklist.conf"
TEMP_FILE=$(mktemp)
WHITELIST_PATH="/etc/unbound/whitelist.conf"
# Whitelist essential domains to prevent breakage. Add your own if needed.
WHITELIST_DOMAINS=(
    "*.mullvad.net" "*.quad9.net" "*.archlinux.org"
    "*.github.com" "githubusercontent.com" "*.fedoraproject.org"
)
# User-Agent to be a good network citizen.
USER_AGENT="ArchFortress-Blocklist-Updater/1.0"

# Add more trusted blocklist sources here.
SOURCES=(
    "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
    "https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext"
    "https://raw.githubusercontent.com/AdguardTeam/AdguardFilters/master/BaseFilter/sections/adservers.txt"
    "https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt"
)

# Download and process sources into Unbound's local-zone format.
{
    for url in "${SOURCES[@]}"; do
        timeout 30 curl -sS -A "$USER_AGENT" --tlsv1.2 --tls-max 1.3 "$url" 2>/dev/null |

| continue
    done
} | awk '
    # For hosts format (e.g., 0.0.0.0 domain.com)
    /^(0\.0\.0\.0|127\.0\.0\.1)[[:space:]]+[^[:space:]#]/ && $2!~ /^(localhost|localhost\.localdomain)$/ {
        gsub(/\r/, ""); domains[$2]++
    }
    # For AdGuard format (e.g., ||domain.com^)
    /^\|\|[a-zA-Z0-9.\-]+\^/ {
        gsub(/[|\^]/, ""); gsub(/\r/, ""); domains[$0]++
    }
    # For simple domain list format
    /^[a-zA-Z0-9.-]+$/ {
        gsub(/\r/, ""); domains[$0]++
    }
    END {
        for (domain in domains) {
            print "local-zone: \"" domain "\" refuse"
        }
    }
' | sort -u > "$TEMP_FILE"

# Generate the whitelist configuration.
{
    for domain in "${WHITELIST_DOMAINS[@]}"; do
        echo "local-zone: \"${domain}.\" transparent"
    done
} | sudo tee "$WHITELIST_PATH" > /dev/null

# Atomically update the blocklist if the new one is valid and contains a sane number of entries.
if]; then
    sudo mv "$TEMP_FILE" "$BLOCKLIST_PATH"
    if systemctl is-active --quiet unbound; then
        sudo unbound-control reload_keep_cache >/dev/null
        logger "FORTRESS DNS: Blocklist updated successfully with $(wc -l < "$BLOCKLIST_PATH") domains."
    fi
else
    logger "FORTRESS DNS: Blocklist update failed or list was too small. Using existing list."
    rm -f "$TEMP_FILE"
fi
EOF
    sudo chmod +x /usr/local/bin/update-dns-blocklist

    # Create the include file for Unbound and run the update script for the first time.
    sudo tee /etc/unbound/user_lists.conf > /dev/null << 'EOF'
# Include user-defined block and white lists
include: "/etc/unbound/whitelist.conf"
include: "/etc/unbound/blocklist.conf"
EOF
    sudo /usr/local/bin/update-dns-blocklist

    # --- AUTOMATION: Systemd Timers ---
    log "Setting up systemd timers for automatic blocklist updates..."
    sudo tee /etc/systemd/system/dns-blocklist-update.service > /dev/null << 'EOF'
[Unit]
Description=Update Unbound DNS blocklist
After=network-online.target
Wants=network-online.target

Type=oneshot
ExecStart=/usr/local/bin/update-dns-blocklist
EOF
    sudo tee /etc/systemd/system/dns-blocklist-update.timer > /dev/null << 'EOF'
[Unit]
Description=Daily update for Unbound DNS blocklist

OnCalendar=daily
RandomizedDelaySec=6h
Persistent=true
[Install]
WantedBy=timers.target
EOF

    # --- NETWORK INTEGRATION & LEAK PREVENTION ---
    log "Hardening network configuration against DNS leaks..."
    # Tell NetworkManager to use this system's resolver exclusively.
    sudo mkdir -p /etc/NetworkManager/conf.d
    echo -e "[main]\ndns=none\nsystemd-resolved=false\n[connection]\nipv6.ip6-privacy=2" | sudo tee /etc/NetworkManager/conf.d/99-dns-fortress.conf > /dev/null

    # Apply surgical firewall rule to allow ONLY the dnscrypt-proxy user to make outbound connections.
    if command -v firewall-cmd &>/dev/null && sudo systemctl is-active --quiet firewalld; then
        log "Applying firewalld rule to prevent DNS leaks..."
        sudo firewall-cmd --permanent --zone=trusted --remove-source=uid:dnscrypt-proxy >/dev/null 2>&1 # Clean up old rule if present
        sudo firewall-cmd --permanent --zone=trusted --add-source=uid:dnscrypt-proxy
        sudo firewall-cmd --reload
    fi

    # Make resolv.conf mutable before writing, then lock it down.
    [[ -f /etc/resolv.conf ]] && sudo chattr -i /etc/resolv.conf 2>/dev/null |

| true
    sudo tee /etc/resolv.conf > /dev/null << 'EOF'
# This system uses a local, hardened, caching, and anonymizing DNS resolver.
# Do not edit this file manually. It is managed by the Arch Fortress scripts.
nameserver 127.0.0.1
nameserver ::1
options edns0 trust-ad timeout:1 rotate
EOF
    sudo chattr +i /etc/resolv.conf

    # --- ROBUST STARTUP ORCHESTRATION ---
    # Create a systemd override to guarantee Unbound starts AFTER dnscrypt-proxy
    # and is stopped if dnscrypt-proxy fails. This prevents DNS black-holing.
    log "Creating systemd override for robust service startup..."
    sudo mkdir -p /etc/systemd/system/unbound.service.d
    sudo tee /etc/systemd/system/unbound.service.d/override.conf > /dev/null <<'EOF'
[Unit]
# Ensure dnscrypt-proxy is running before Unbound starts.
After=dnscrypt-proxy.service
# If dnscrypt-proxy stops or crashes, stop Unbound too.
BindsTo=dnscrypt-proxy.service
EOF

    # --- ACTIVATION ---
    log "Activating and enabling services..."
    sudo systemctl daemon-reload
    sudo systemctl enable --now dns-blocklist-update.timer
    # Start the proxy first, then the resolver. The override ensures this order.
    sudo systemctl enable --now dnscrypt-proxy.service
    sudo systemctl enable --now unbound.service
    # Restart NetworkManager to apply the new DNS configuration.
    sudo systemctl restart NetworkManager.service

    # --- VERIFICATION ---
    log "Verifying the fortress..."
    sleep 3 # Allow services a moment to stabilize before testing.

    local VERIFIED=true
    if! timeout 5 dig @127.0.0.1 +dnssec archlinux.org >/dev/null; then
        error "DNS resolution test FAILED. Could not resolve archlinux.org."
        VERIFIED=false
    fi
    if! timeout 5 dig @127.0.0.1 sigfail.verteiltesysteme.net 2>&1 | grep -q "status: SERVFAIL"; then
        error "DNSSEC validation test FAILED. Did not get SERVFAIL for a known bad signature."
        VERIFIED=false
    fi
    if! unbound-control status 2>/dev/null | grep -q "is running"; then
        error "Unbound service is not running or unbound-control failed."
        VERIFIED=false
    fi

    if]; then
        log "✅ DNS resolution operating normally."
        log "✅ DNSSEC validation CONFIRMED (Correctly returned SERVFAIL for a bad signature)."
        log "✅ Blocklist contains $(wc -l < /etc/unbound/blocklist.conf | awk '{print $1}') domains."
        log "🛡️ FORTRESS DNS is online and protecting your network."
    else
        error "DNS verification FAILED. Please check service status with:"
        error "--> sudo systemctl status unbound.service dnscrypt-proxy.service"
        error "--> sudo journalctl -u unbound -u dnscrypt-proxy -e"
        error "--> sudo unbound-control status"
        return 1
    fi
}

setup_fortress_dns