#!/bin/bash

# 🔱 ARCH FORTRESS - PART 1: PRODUCTION FOUNDATION 🔱

# Zero-Trust Arch Linux Installation - Development Workstation

# Target: i7-12700H, RTX 3070Ti Mobile, 32GB RAM, 1TB NVMe SSD

set -euo pipefail

# Colors for output

RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
NC="\033[0m"

# Configuration Variables

DISK="/dev/nvme0n1"
HOSTNAME="fortress"
USERNAME="mastermind"
LOCALE="en_US.UTF-8"
TIMEZONE="UTC"
KEYMAP="us"

# LUKS2 Configuration - Balanced for boot performance

LUKS_CIPHER="aes-xts-plain64"
LUKS_HASH="sha512"
LUKS_KEY_SIZE="512"
LUKS_ITER_TIME="3000"
LUKS_PBKDF="argon2id"
LUKS_PBKDF_MEMORY="1048576"
LUKS_PBKDF_PARALLEL="4"

# BTRFS Mount Options - SSD optimized

BTRFS_MOUNT_OPTS="rw,noatime,compress=zstd:1,space_cache=v2,discard=async"

# Logging functions

log() {
echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
echo -e "${RED}[ERROR]${NC} $1" >&2
exit 1
}

warning() {
echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
echo -e "${BLUE}[INFO]${NC} $1"
}

# Verification functions

verify_system() {
log "🔍 Verifying system requirements…"


# Check UEFI mode
if [ ! -d /sys/firmware/efi ]; then
    error "System must boot in UEFI mode"
fi

# Check network connectivity
if ! ping -c 1 archlinux.org &>/dev/null; then
    error "Network connectivity required"
fi

# Check disk exists
if [ ! -b "$DISK" ]; then
    error "Disk $DISK not found"
fi

# Check memory (minimum 8GB)
local mem_gb=$(free -g | awk '/^Mem:/{print $2}')
if [ "$mem_gb" -lt 8 ]; then
    error "Minimum 8GB RAM required"
fi

log "✅ System verification complete"

}

# Disk preparation - proper NVMe handling
prepare_disk() {
    log "🔧 Preparing disk with secure NVMe optimization…"

    # Secure erase using NVMe sanitize (faster than dd)
    info "Performing secure NVMe sanitize... This may take a long time."
    # sanact=2 performs a block erase. See 'nvme sanitize-log' for supported modes.
    info "Performing blocking NVMe sanitize... This will take a long time."
# The command will not return until the sanitize operation is complete.
# -a 2 specifies the block erase action.
if ! nvme sanitize "$DISK" -a 2; then
    error "NVMe Sanitize failed. Cannot proceed securely."
fi
info "NVMe sanitize completed successfully."
# Add a small, robust delay for the drive controller to become fully ready.
sleep 3

    # Create GPT partition table
    sgdisk --clear "$DISK"
    sgdisk --new=1:0:+1G --typecode=1:ef00 --change-name=1:"EFI System" "$DISK"
    sgdisk --new=2:0:0 --typecode=2:8300 --change-name=2:"Linux filesystem" "$DISK"

    # Inform kernel of partition changes
    partprobe "$DISK"
    sleep 2

    log "✅ Disk partitioning complete"
}

# LUKS2 encryption - balanced performance

setup_encryption() {
log "🔐 Setting up LUKS2 encryption…"


local root_partition="${DISK}p2"

# Create LUKS2 container with balanced parameters
cryptsetup luksFormat \
    --type luks2 \
    --cipher "$LUKS_CIPHER" \
    --hash "$LUKS_HASH" \
    --key-size "$LUKS_KEY_SIZE" \
    --iter-time "$LUKS_ITER_TIME" \
    --pbkdf "$LUKS_PBKDF" \
    --pbkdf-memory "$LUKS_PBKDF_MEMORY" \
    --pbkdf-parallel "$LUKS_PBKDF_PARALLEL" \
    --use-random \
    --verbose \
    "$root_partition"

# Open the encrypted container
cryptsetup open "$root_partition" cryptroot

log "✅ LUKS2 encryption setup complete"


}

# BTRFS filesystem with practical subvolumes

setup_btrfs() {
log "🌳 Setting up BTRFS with optimized subvolumes…"


# Create BTRFS filesystem
mkfs.btrfs -f -L "Fortress" /dev/mapper/cryptroot

# Mount root to create subvolumes
mount /dev/mapper/cryptroot /mnt

# Create subvolume structure
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@var
btrfs subvolume create /mnt/@opt
btrfs subvolume create /mnt/@containers
btrfs subvolume create /mnt/@snapshots

# Unmount to remount with proper structure
umount /mnt

log "✅ BTRFS subvolumes created"


}

# Mount filesystem with security options

mount_filesystem() {
log "📁 Mounting filesystem with security optimizations…"


# Mount root subvolume
mount -o "$BTRFS_MOUNT_OPTS,subvol=@" /dev/mapper/cryptroot /mnt

# Create mount points
mkdir -p /mnt/{home,var,opt,containers,snapshots,boot}

# Mount subvolumes with security options
mount -o "$BTRFS_MOUNT_OPTS,subvol=@home" /dev/mapper/cryptroot /mnt/home
mount -o "$BTRFS_MOUNT_OPTS,subvol=@var,nosuid,nodev" /dev/mapper/cryptroot /mnt/var
mount -o "$BTRFS_MOUNT_OPTS,subvol=@opt,nosuid,nodev" /dev/mapper/cryptroot /mnt/opt
mount -o "$BTRFS_MOUNT_OPTS,subvol=@containers,nosuid,nodev" /dev/mapper/cryptroot /mnt/containers
mount -o "$BTRFS_MOUNT_OPTS,subvol=@snapshots" /dev/mapper/cryptroot /mnt/snapshots

# Mount EFI partition
mkfs.fat -F32 -n "EFIBOOT" "${DISK}p1"
mount "${DISK}p1" /mnt/boot

log "✅ Filesystem mounted with security optimizations"


}

# Install base system - minimal but complete

install_base_system() {
log "💿 Installing base system…"

# Install base packages
pacstrap -K /mnt \
    base \
    base-devel \
    linux-hardened \
    linux-hardened-headers \
    linux-firmware \
    intel-ucode \
    btrfs-progs \
    cryptsetup \
    networkmanager \
    apparmor \
    firewalld \
    git \
    vim \
    sudo \
    man-db \
    man-pages \
    openssh \
    podman \
    buildah \
    skopeo \
    fuse-overlayfs \
    slirp4netns \
    cni-plugins \
    runc \
    audit \
    usbguard \
    zram-generator \
    aide \
    conmon
log "✅ Base system installed"


}

# Configure system basics

configure_system() {
log "⚙️ Configuring system…"


# Generate fstab
genfstab -U /mnt >> /mnt/etc/fstab

# Configure timezone and locale
arch-chroot /mnt ln -sf /usr/share/zoneinfo/"$TIMEZONE" /etc/localtime
arch-chroot /mnt hwclock --systohc

# Configure locale
echo "$LOCALE UTF-8" > /mnt/etc/locale.gen
echo "LANG=$LOCALE" > /mnt/etc/locale.conf
echo "KEYMAP=$KEYMAP" > /mnt/etc/vconsole.conf
arch-chroot /mnt locale-gen

# Configure hostname
echo "$HOSTNAME" > /mnt/etc/hostname
cat > /mnt/etc/hosts << EOF


127.0.0.1   localhost
::1         localhost
127.0.1.1   $HOSTNAME.localdomain $HOSTNAME
EOF

# Configure mkinitcpio
cat > /mnt/etc/mkinitcpio.conf << 'EOF'


MODULES=(btrfs)
BINARIES=()
FILES=()
HOOKS=(base systemd autodetect modconf kms keyboard block sd-encrypt filesystems fsck)
COMPRESSION="zstd"
COMPRESSION_OPTIONS=(-3)
UMASK=0077
EOF


# Regenerate initramfs
arch-chroot /mnt mkinitcpio -P

log "✅ System configuration complete"


}

setup_zram() {
    log "💾 Setting up zram for high-performance, secure in-memory swap..."
    # zram offers better performance and security as swapped memory pages never touch the disk.
    # This mitigates risks of sensitive data being recovered from persistent storage.
    # Hibernation is not supported with this configuration.
    # See: https://wiki.archlinux.org/title/Zram

    # This configuration creates a zstd-compressed zram device with a size of 50% of total RAM.
    # For a 32GB system, this creates a 16GB zram device.
    cat > /mnt/etc/systemd/zram-generator.conf << 'EOF'
[zram0]
zram-size = ram / 2
compression-algorithm = zstd
swap-priority = 100
EOF

    arch-chroot /mnt systemctl enable systemd-zram-generator
    log "✅ zram configured. zswap will be disabled via kernel parameter."
}

# Setup systemd-boot

setup_boot() {
log "🚀 Setting up systemd-boot…"


# Install systemd-boot
arch-chroot /mnt bootctl install

# Get UUID of encrypted partition
local uuid=$(blkid -s UUID -o value "${DISK}p2")

# Configure systemd-boot loader
cat > /mnt/boot/loader/loader.conf << 'EOF'


default arch.conf
timeout 3
console-mode max
editor no
EOF


# Create boot entry with security parameters
cat > /mnt/boot/loader/entries/arch.conf << EOF


title   Arch Fortress
linux   /vmlinuz-linux-hardened
initrd  /intel-ucode.img
initrd  /initramfs-linux.img
options rd.luks.name=$uuid=cryptroot root=/dev/mapper/cryptroot rootflags=subvol=@ rw lsm=landlock,lockdown,yama,apparmor,bpf audit=1 zswap.enabled=0 mitigations=auto
EOF


# Create fallback entry
cat > /mnt/boot/loader/entries/arch-fallback.conf << EOF


title   Arch Fortress (Fallback)
linux   /vmlinuz-linux-hardened
initrd  /intel-ucode.img
initrd  /initramfs-linux-fallback.img
options rd.luks.name=$uuid=cryptroot root=/dev/mapper/cryptroot rootflags=subvol=@ rw lsm=landlock,lockdown,yama,apparmor,bpf audit=1 zswap.enabled=0 mitigations=auto
EOF


log "✅ Systemd-boot configured"


}

# Setup network security

setup_network_security() {
log "🌐 Setting up network security…"


# Enable NetworkManager
arch-chroot /mnt systemctl enable NetworkManager.service

# Configure firewalld
arch-chroot /mnt systemctl enable firewalld.service

log "✅ Network security configured"


}

# Setup container environment

setup_containers() {
log "🐳 Setting up container environment…"


# Enable Podman socket
arch-chroot /mnt systemctl enable podman.socket

# Create container storage configuration
cat > /mnt/etc/containers/storage.conf << 'EOF'


[storage]
driver = "overlay"
runroot = "/run/containers/storage"
graphroot = "/containers/storage"
rootless_storage_path = "$HOME/.local/share/containers/storage"

[storage.options]
additionalimagestores = []
mount_program = "/usr/bin/fuse-overlayfs"

[storage.options.overlay]
mountopt = "nodev,metacopy=on"
EOF


# Create registries configuration
cat > /mnt/etc/containers/registries.conf << 'EOF'


[registries.search]
registries = ['docker.io', 'quay.io', 'registry.fedoraproject.org']

[registries.insecure]
registries = []

[registries.block]
registries = []
EOF




log "✅ Container environment configured"


}

setup_sshd_hardening() {
    log "🔒 Hardening SSH daemon..."
    # Replace default sshd_config with a hardened version
    cat > /mnt/etc/ssh/sshd_config << 'EOF'
# Fortress Hardened SSHD Config
Port 22
Protocol 2
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key

# Disable legacy and weak algorithms
KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com

LoginGraceTime 1m
PermitRootLogin no
StrictModes yes
MaxAuthTries 3
MaxSessions 2

PubkeyAuthentication yes
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
KerberosAuthentication no
GSSAPIAuthentication no

UsePAM yes
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no
PrintMotd no
ClientAliveInterval 300
ClientAliveCountMax 0
Subsystem sftp internal-sftp
EOF
    log "✅ SSH daemon hardened. Password authentication disabled."
}

# Create user with security

create_user() {
log "👤 Creating user…"


# Create user
arch-chroot /mnt useradd -m -G wheel -s /bin/bash "$USERNAME"

# Configure sudo
cat > /mnt/etc/sudoers.d/10-security << 'EOF'


Defaults env_reset
Defaults mail_badpass
Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
Defaults use_pty
Defaults timestamp_timeout=5
Defaults passwd_tries=3
%wheel ALL=(ALL:ALL) ALL
EOF


# Set passwords
echo "Set password for user $USERNAME:"
arch-chroot /mnt passwd "$USERNAME"

echo "Set password for root:"
arch-chroot /mnt passwd

log "✅ User created"


}

# Apply security hardening

apply_security_hardening() {
log "🔒 Applying security hardening…"


# Configure sysctl - container-friendly
cat > /mnt/etc/sysctl.d/99-security.conf << 'EOF'


# Network security

net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_rfc1337 = 1
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Kernel security

kernel.dmesg_restrict = 1
kernel.kptr_restrict = 2
kernel.yama.ptrace_scope = 1
kernel.unprivileged_bpf_disabled = 1
kernel.kexec_load_disabled = 1
kernel.sysrq = 0
kernel.core_uses_pid = 1

# Memory protection

vm.mmap_rnd_bits = 32
vm.mmap_rnd_compat_bits = 16

# File system security

fs.suid_dumpable = 0
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
fs.protected_fifos = 2
fs.protected_regular = 2

EOF


# Configure journal
cat > /mnt/etc/systemd/journald.conf.d/security.conf << 'EOF'


[Journal]
Storage=persistent
Compress=yes
SystemMaxUse=1G
SystemMaxFileSize=100M
MaxRetentionSec=1month
EOF


# Set file permissions
arch-chroot /mnt chmod 600 /etc/shadow
arch-chroot /mnt chmod 600 /etc/gshadow

# (Add before line 427 in Arch-1.txt)
# Allow rootless Podman to bind to privileged ports for DNS
cat > /mnt/etc/sysctl.d/98-podman-low-ports.conf << 'EOF'
net.ipv4.ip_unprivileged_port_start=53
EOF

log "🛡️ Generating and enabling usbguard policy..."
# Generate an initial policy that allows currently connected devices
usbguard generate-policy > /mnt/etc/usbguard/rules.conf
# Enable the service to start on boot
arch-chroot /mnt systemctl enable usbguard.service

log "✅ Security hardening applied"


}

setup_pam_faillock() {
    log "🛡️ Setting up pam_faillock for brute-force mitigation..."

    # Configure faillock settings
    cat > /mnt/etc/security/faillock.conf << 'EOF'
# Fortress faillock configuration
# Lock account after 5 failed attempts
deny = 5
# Lockout duration is 15 minutes
unlock_time = 900
# Also lock the root account
even_deny_root
# Log attempts for non-existent users
audit
EOF

# This is a safer way to modify PAM configuration.

# This is a safer way to modify PAM configuration.
arch-chroot /mnt /bin/bash -c '
CONF_FILE="/etc/pam.d/system-login"
# Add preauth check
grep -q "pam_faillock.so preauth" "$CONF_FILE" || \
  sed -i "/^auth      include   system-auth/i auth      required  pam_faillock.so preauth" "$CONF_FILE"
# Add authfail check
grep -q "pam_faillock.so authfail" "$CONF_FILE" || \
  sed -i "/^auth      include   system-auth/a auth      [default=die] pam_faillock.so authfail" "$CONF_FILE"
# Add account check
grep -q "account   required  pam_faillock.so" "$CONF_FILE" || \
  sed -i "/^account   include   system-auth/a account   required  pam_faillock.so" "$CONF_FILE"
'

    log "✅ pam_faillock configured."
}

setup_auditd() {
    log "🛡️ Setting up Linux Audit Framework (auditd)..."

    # Add audit=1 to the kernel command line to start auditing before auditd daemon
    # This is done by modifying the bootloader setup function directly.
    # We will ensure the setup_boot function includes this parameter.

    # Enable the auditd service
    arch-chroot /mnt systemctl enable auditd.service

    # Create a baseline ruleset based on CIS benchmarks
    # See: https://www.cisecurity.org/cis-benchmarks/
    cat > /mnt/etc/audit/rules.d/10-fortress-enhanced.rules << 'EOF'
# 🔱 ARCH FORTRESS - Enhanced Auditd Ruleset 🔱
# Based on CIS/STIG principles for comprehensive forensic logging.
## Make configuration immutable until reboot
-e 2
## Increase buffer size and set failure mode to panic
-b 8192
-f 1
## System Identity & Locale (CIS 4.1.7)
-w /etc/group -p wa -k identity
-w /etc/passwd -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity
-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
-w /etc/issue -p wa -k system-locale
-w /etc/issue.net -p wa -k system-locale
-w /etc/hosts -p wa -k system-locale
## Mandatory Access Control (MAC) & Sudoers (CIS 4.1.8, 4.1.9)
-w /etc/apparmor/ -p wa -k mac-policy
-w /etc/apparmor.d/ -p wa -k mac-policy
-w /etc/sudoers -p wa -k scope
-w /etc/sudoers.d/ -p wa -k scope
## Login/Logout and Session Events (CIS 4.1.10, 4.1.11)
-w /var/log/faillog -p wa -k logins
-w /var/log/lastlog -p wa -k logins
-w /var/run/faillock/ -p wa -k logins
-w /var/run/utmp -p wa -k session
-w /var/log/wtmp -p wa -k session
-w /var/log/btmp -p wa -k session
## Filesystem Mounts (CIS 4.1.13)
-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=-1 -k mounts
-a always,exit -F arch=b64 -S umount2 -F auid>=1000 -F auid!=-1 -k mounts
## File Deletion Events (CIS 4.1.14)
-a always,exit -F arch=b64 -S unlink,unlinkat,rename,renameat -F auid>=1000 -F auid!=-1 -k delete
## Discretionary Access Control (DAC) Modifications (CIS 4.1.12)
-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=-1 -k perm_mod
-a always,exit -F arch=b64 -S chown,fchown,fchownat,lchown -F auid>=1000 -F auid!=-1 -k perm_mod
-a always,exit -F arch=b64 -S setxattr,fsetxattr,lsetxattr,removexattr,fremovexattr,lremovexattr -F auid>=1000 -F auid!=-1 -k perm_mod
## Unauthorized Access to Files (CIS 4.1.15)
-a always,exit -F arch=b64 -S creat,open,openat,open_by_handle_at,truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=-1 -k access
-a always,exit -F arch=b64 -S creat,open,openat,open_by_handle_at,truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=-1 -k access
## Privileged Command Usage (CIS 4.1.16)
-a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=-1 -k priv_cmd
-a always,exit -F path=/usr/bin/su -F perm=x -F auid>=1000 -F auid!=-1 -k priv_cmd
# Add more paths for commands that grant privileges as needed
## Kernel Module Loading (CIS 4.1.17)
-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-a always,exit -F arch=b64 -S init_module,finit_module,delete_module -k modules
## Container-related syscalls
-a always,exit -F arch=b64 -S unshare -k containers
-a always,exit -F arch=b64 -S setns -k containers
EOF

    log "✅ Auditd configured."
}

# Main installation function

main() {
    log "🔱 Starting Arch Fortress Installation - Part 1 🔱"


# Pre-installation checks
verify_system

# Disk and encryption setup
prepare_disk
setup_encryption

# Filesystem setup
setup_btrfs
mount_filesystem

# Base system installation
install_base_system
configure_system

# Boot and zram configuration
setup_zram
setup_boot

# Security and networking
setup_network_security
setup_containers

# Sshd hardening
setup_sshd_hardening

# User creation
create_user

# Setup pam faillock
setup_pam_faillock

# Setup auditd
setup_auditd

# Final hardening
apply_security_hardening

log "🎉 Arch Fortress Part 1 Installation Complete! 🎉"
info "Ready to shut down. Press Enter to reboot."
read
reboot


}

# Execute main function
main "$@"