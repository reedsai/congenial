## Consequences Analysis:

**DNS over VPN = BIG MISTAKE for Kill Switch:**

- If VPN down but DNS works → **Apps will resolve IPs then try direct connection**
- **Metadata leak:** DNS queries reveal what you’re trying to access
- **Timing correlation:** ISP sees DNS queries but no HTTP traffic (suspicious)

**You’re absolutely right - DNS should die with VPN.**

## How Commercial Kill Switches Work:

**ExpressVPN/NordVPN/Surfshark:**

1. **Route table hijacking** - redirect default route to null
1. **Interface monitoring** - kill internet if VPN interface down
1. **DNS hijacking** - redirect DNS to 127.0.0.1 (fails when VPN down)
1. **Application binding** - force apps to use VPN interface only

**Best approach: Route table method (elegant + convenient)**

## ULTIMATE CONVENIENCE + SECURITY SOLUTION:

```bash
sudo tee /usr/local/bin/vpn-firewall << 'EOF'
#!/bin/bash

setup_commercial_grade_killswitch() {
    local config="$1"
    
    # Extract server info
    local endpoint=$(grep "Endpoint" "$config" | cut -d'=' -f2 | tr -d ' ')
    local server_ip=$(echo "$endpoint" | cut -d':' -f1)
    local port=$(echo "$endpoint" | cut -d':' -f2)
    
    # Method 1: Clean firewall setup
    sudo iptables -F
    sudo iptables -P INPUT DROP
    sudo iptables -P FORWARD DROP
    sudo iptables -P OUTPUT DROP
    
    # Method 2: Essential services (minimal)
    sudo iptables -A INPUT -i lo -j ACCEPT
    sudo iptables -A OUTPUT -o lo -j ACCEPT
    sudo iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT
    
    # Method 3: VPN connection only
    sudo iptables -A OUTPUT -d "$server_ip" -p udp --dport "$port" -j ACCEPT
    
    # Method 4: VPN interface traffic (when it exists)
    sudo iptables -A OUTPUT -o mulvad -j ACCEPT
    sudo iptables -A INPUT -i mulvad -j ACCEPT
    
    # Method 5: Established connections ONLY through VPN
    sudo iptables -A INPUT -i mulvad -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A OUTPUT -o mulvad -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    
    # Method 6: DNS ONLY when VPN up (dies with VPN)
    sudo iptables -A OUTPUT -o mulvad -d 127.0.0.1 -p udp --dport 53 -j ACCEPT
    
    # Method 7: Route table manipulation (commercial grade)
    # Save original route
    ip route show default | head -1 > /tmp/original_route
    
    # Kill default route when VPN down (this breaks everything elegantly)
    if ! ip link show mulvad >/dev/null 2>&1; then
        sudo ip route del default 2>/dev/null || true
    fi
    
    echo "Commercial-grade kill switch active"
}

setup_convenience_mode() {
    local config="$1"
    
    # Extract server info  
    local endpoint=$(grep "Endpoint" "$config" | cut -d'=' -f2 | tr -d ' ')
    local server_ip=$(echo "$endpoint" | cut -d':' -f1)
    local port=$(echo "$endpoint" | cut -d':' -f2)
    
    # Hybrid approach: Firewall + Route manipulation
    sudo iptables -F
    sudo iptables -P INPUT DROP
    sudo iptables -P FORWARD DROP
    sudo iptables -P OUTPUT DROP
    
    # Allow localhost (for convenience)
    sudo iptables -A INPUT -i lo -j ACCEPT
    sudo iptables -A OUTPUT -o lo -j ACCEPT
    
    # SSH access
    sudo iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT
    
    # VPN server connection
    sudo iptables -A OUTPUT -d "$server_ip" -p udp --dport "$port" -j ACCEPT
    
    # VPN interface (when up)
    sudo iptables -A OUTPUT -o mulvad -j ACCEPT
    sudo iptables -A INPUT -i mulvad -j ACCEPT
    sudo iptables -A INPUT -i mulvad -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A OUTPUT -o mulvad -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    
    # Smart DNS: Only through VPN, but fallback to localhost when VPN up
    if ip link show mulvad >/dev/null 2>&1; then
        # VPN up: allow DNS through localhost (your DNSCrypt)
        sudo iptables -A OUTPUT -d 127.0.0.1 -p udp --dport 53 -j ACCEPT
    else
        # VPN down: block DNS completely (dies with VPN)
        sudo iptables -A OUTPUT -d 127.0.0.1 -p udp --dport 53 -j REJECT
    fi
    
    # Emergency Tor access (convenience feature)
    sudo iptables -A OUTPUT -d 127.0.0.1 -p tcp --dport 9050 -j ACCEPT
    
    # Route manipulation for elegance
    if ! ip link show mulvad >/dev/null 2>&1; then
        # VPN down: make internet "feel" broken (like commercial VPNs)
        sudo ip route add blackhole default metric 999 2>/dev/null || true
    fi
    
    echo "Convenience kill switch active (Tor available as backup)"
}

restore_base_firewall() {
    # Restore routes first
    if [ -f /tmp/original_route ]; then
        ORIGINAL_ROUTE=$(cat /tmp/original_route)
        sudo ip route del default 2>/dev/null || true
        sudo ip route add $ORIGINAL_ROUTE 2>/dev/null || true
        rm -f /tmp/original_route
    fi
    
    # Clean up blackhole routes
    sudo ip route del blackhole default 2>/dev/null || true
    
    # Your original safe firewall
    sudo iptables -F
    sudo iptables -P INPUT DROP
    sudo iptables -P FORWARD DROP
    sudo iptables -P OUTPUT DROP
    sudo iptables -A INPUT -i lo -j ACCEPT
    sudo iptables -A OUTPUT -o lo -j ACCEPT
    sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT
    sudo iptables -A OUTPUT -d 127.0.0.1 -p udp --dport 53 -j ACCEPT
    sudo iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
    sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
    sudo iptables -A OUTPUT -p udp --dport 123 -j ACCEPT
    sudo iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT
}

case "$1" in
    speed) setup_convenience_mode "/etc/wireguard/profiles/speed.conf" ;;
    privacy) setup_convenience_mode "/etc/wireguard/profiles/privacy.conf" ;;
    streaming) setup_convenience_mode "/etc/wireguard/profiles/streaming.conf" ;;
    commercial-speed) setup_commercial_grade_killswitch "/etc/wireguard/profiles/speed.conf" ;;
    commercial-privacy) setup_commercial_grade_killswitch "/etc/wireguard/profiles/privacy.conf" ;;
    commercial-streaming) setup_commercial_grade_killswitch "/etc/wireguard/profiles/streaming.conf" ;;
    clear) restore_base_firewall ;;
    *) echo "Usage: $0 [speed|privacy|streaming|commercial-*|clear]"; exit 1 ;;
esac

sudo iptables-save | sudo tee /etc/iptables/iptables.rules > /dev/null
EOF
```

## Best of Both Worlds Setup:

**Default Mode (Convenience):**

- DNS dies with VPN ✅
- Tor available as backup ✅
- Clean failure (no leaks) ✅
- User-friendly ✅

**Commercial Mode (Maximum Security):**

- Everything dies with VPN ✅
- No backup access ✅
- Complete isolation ✅

## Recommendation:

**Use convenience mode** - gives you commercial-grade security with Tor backup:

```bash
vpn-switch privacy  # Uses convenience mode by default
# VPN down = DNS down, but Tor still works for emergency
```

**This is how ExpressVPN/NordVPN work** - secure by default, convenient for users.​​​​​​​​​​​​​​​​