#!/bin/bash
#
# ðŸ”± Citadel Connect v2.1 - Hardened & Robust Edition ðŸ”±
#
# An advanced command-line utility for establishing a highly resilient and
# obfuscated VPN tunnel, designed to defeat Deep Packet Inspection (DPI) in
# restrictive network environments. This script routes WireGuard traffic through a
# Shadowsocks-Rust proxy, which is then camouflaged as standard HTTPS traffic
# using the v2ray-plugin.
#
# v2.1 Changelog:
# - Does not modify original WireGuard config; uses a temporary copy for safety.
# - Replaced static 'sleep' with an active port check to prevent race conditions.
#
# Dependencies:
# - wireguard-tools
# - shadowsocks-rust
# - shadowsocks-v2ray-plugin
# - jq
# - curl
# - iptables
# - ip6tables
# - iproute2 (for `ss` command)

set -euo pipefail

# --- Configuration ---
WG_CONF="/etc/wireguard/mullvad-wg0.conf"
SS_USER="nobody"
SS_LOCAL_PORT="1080"
HEALTH_CHECK_URL="https://am.i.mullvad.net/ip"
MULLVAD_API_URL="https://api.mullvad.net/public/relays/wireguard/v1/"

# --- Globals & Colors ---
TMP_DIR=""
SS_LOCAL_PID=""
IPTABLES_STATE_FILE=""
SCRIPT_NAME=$(basename "$0")
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
NC="\033[0m"

# --- Logging Functions ---
log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; exit 1; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

# --- Core Functions ---

usage() {
    echo "Usage: $SCRIPT_NAME <command>"
    echo
    echo "A hardened utility to create a WireGuard-over-Shadowsocks-over-WSS tunnel."
    echo
    echo "Commands:"
    echo "  list              List available WGoSS-compatible bridge servers."
    echo "  connect <id>      Connect to the server with the specified ID."
    echo "  disconnect        Disconnect the active session."
    echo "  status            Check the status of the current connection."
    echo "  help              Show this help message."
    exit 1
}

setup_trap() {
    trap 'cleanup' EXIT INT TERM
}

cleanup() {
    info "Initiating graceful cleanup sequence..."

    if [[ -n "${SS_LOCAL_PID:-}" ]] && ps -p "$SS_LOCAL_PID" > /dev/null; then
        log "Stopping Shadowsocks local proxy (PID: $SS_LOCAL_PID)..."
        kill "$SS_LOCAL_PID" 2>/dev/null || true
    fi

    log "Deactivating WireGuard interface..."
    # If a temp config was used, it will be in the temp dir. wg-quick stores state by interface name.
    wg-quick down "$TMP_DIR/wg0-temp.conf" &>/dev/null || wg-quick down "$WG_CONF" &>/dev/null || true

    log "Removing firewall kill switch rules..."
    remove_killswitch || true

    if [[ -n "${TMP_DIR:-}" ]] && [[ -d "$TMP_DIR" ]]; then
        log "Cleaning up temporary directory..."
        rm -rf "$TMP_DIR"
    fi
    log "Cleanup complete. System restored to its hardened state."
}

add_rule() {
    local rule="$@"
    log "FIREWALL: Adding rule: $rule"
    eval "$rule"
    echo "$rule" >> "$IPTABLES_STATE_FILE"
}

apply_killswitch() {
    info "Applying stateful firewall kill switch..."
    local bridge_ip
    bridge_ip=$(cat "$TMP_DIR/bridge_ip.txt")
    add_rule "iptables -I OUTPUT 1 -o wg0 -j ACCEPT"
    add_rule "iptables -I OUTPUT 2 -p tcp -d '$bridge_ip' --dport 443 -j ACCEPT"
    add_rule "iptables -I OUTPUT 3 -o lo -j ACCEPT"
    add_rule "iptables -I OUTPUT 4 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT"
    add_rule "iptables -I INPUT 1 -i lo -j ACCEPT"
    add_rule "iptables -I INPUT 2 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT"
    add_rule "ip6tables -I OUTPUT 1 -o wg0 -j ACCEPT"
    add_rule "ip6tables -I OUTPUT 2 -o lo -j ACCEPT"
    add_rule "ip6tables -I OUTPUT 3 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT"
    add_rule "ip6tables -I INPUT 1 -i lo -j ACCEPT"
    add_rule "ip6tables -I INPUT 2 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT"
    log "âœ… Firewall kill switch is active."
}

remove_killswitch() {
    info "Removing stateful firewall kill switch rules..."
    if [[ -f "$IPTABLES_STATE_FILE" ]]; then
        tac "$IPTABLES_STATE_FILE" | while IFS= read -r rule; do
            local delete_rule="${rule/ -I / -D }"
            delete_rule="${delete_rule// [0-9] / }" # More robustly remove numbers
            log "FIREWALL: Removing rule: $delete_rule"
            eval "$delete_rule" 2>/dev/null || true
        done
        rm -f "$IPTABLES_STATE_FILE"
    else
        info "No state file found. Firewall should be in its default hardened state."
    fi
    log "âœ… Firewall restored to default hardened configuration."
}

list_servers() {
    info "Fetching server list from Mullvad API..."
    local response
    response=$(curl -sS --fail "$MULLVAD_API_URL" || error "Failed to fetch server list from Mullvad API.")

    info "Parsing and filtering for compatible bridge servers..."
    local servers
    servers=$(echo "$response" | jq -r '
       .countries[].cities[].relays[] |
        select(.active == true and .type == "bridge" and .stboot == true) |
        "\(.hostname)|\(.country_name)|\(.city_name)|\(.ipv4_addr_in)"
    ')

    if [[ -z "$servers" ]]; then
        error "No compatible WGoSS bridge servers found."
    fi

    echo -e "${YELLOW}Available WGoSS Bridge Servers:${NC}"
    echo "------------------------------------------------------------------------"
    printf "%-5s %-20s %-20s %s\n" "ID" "Country" "City" "Hostname"
    echo "------------------------------------------------------------------------"
    local i=1
    while IFS= read -r line; do
        local hostname city country
        hostname=$(echo "$line" | cut -d'|' -f1)
        country=$(echo "$line" | cut -d'|' -f2)
        city=$(echo "$line" | cut -d'|' -f3)
        printf "%-5s %-20s %-20s %s\n" "[$i]" "$country" "$city" "$hostname"
        i=$((i+1))
    done <<< "$servers"
    echo "------------------------------------------------------------------------"
    echo "$servers" > "$TMP_DIR/server_list.txt"
}

health_check() {
    info "Performing health check..."
    if ! ps -p "$SS_LOCAL_PID" > /dev/null; then
        error "Health check FAILED: ss-local process (PID: $SS_LOCAL_PID) is not running."
        return 1
    fi
    log "âœ… ss-local process is active."

    if ! ip link show wg0 &>/dev/null; then
        error "Health check FAILED: WireGuard interface 'wg0' does not exist."
        return 1
    fi
    log "âœ… WireGuard interface 'wg0' is up."

    info "Checking tunnel connectivity..."
    local external_ip
    external_ip=$(curl --interface wg0 --connect-timeout 10 -sS "$HEALTH_CHECK_URL")
    if [[ -n "$external_ip" ]]; then
        log "âœ… Health check successful. External IP via tunnel: $external_ip"
    else
        error "Health check FAILED: Could not reach the internet through the tunnel."
        return 1
    fi
}

connect() {
    local server_id=$1
    if [[ ! -f "$TMP_DIR/server_list.txt" ]]; then
        list_servers
    fi

    local server_line
    server_line=$(sed -n "${server_id}p" "$TMP_DIR/server_list.txt")
    if [[ -z "$server_line" ]]; then
        error "Invalid server ID: $server_id. Use '$SCRIPT_NAME list' to see available servers."
    fi

    local hostname ipv4
    hostname=$(echo "$server_line" | cut -d'|' -f1)
    ipv4=$(echo "$server_line" | cut -d'|' -f4)
    echo "$ipv4" > "$TMP_DIR/bridge_ip.txt"
    log "Selected server: $hostname ($ipv4)"

    if [[ -f "$TMP_DIR/ss-local.pid" ]]; then
        error "An active connection already exists. Please run '$SCRIPT_NAME disconnect' first."
    fi

    info "Starting Shadowsocks local proxy (ss-local)..."
    local plugin_opts="tls;host=$hostname"
    sudo -u "$SS_USER" ss-local -b "127.0.0.1" -l "$SS_LOCAL_PORT" -s "$ipv4:443" -m "chacha20-ietf-poly1305" -k "mullvad" --plugin "v2ray-plugin" --plugin-opts "$plugin_opts" --udp -v &> "$TMP_DIR/ss-local.log" &
    SS_LOCAL_PID=$!
    echo "$SS_LOCAL_PID" > "$TMP_DIR/ss-local.pid"

    info "Waiting for ss-local proxy to initialize..."
    local retries=10
    local count=0
    while ! ss -ltn "sport = :$SS_LOCAL_PORT" | grep -q "LISTEN"; do
        ((count++))
        if [[ $count -gt $retries ]]; then
            error "ss-local proxy failed to start in time. Check log: $TMP_DIR/ss-local.log"
        fi
        sleep 0.5
    done
    log "âœ… ss-local started with PID: $SS_LOCAL_PID"

    info "Creating temporary WireGuard configuration..."
    local temp_wg_conf="$TMP_DIR/wg0-temp.conf"
    cp "$WG_CONF" "$temp_wg_conf"
    echo -e "\n[Socks5Proxy]\nEnabled = true\nEndpoint = 127.0.0.1:$SS_LOCAL_PORT" >> "$temp_wg_conf"

    apply_killswitch

    info "Bringing up WireGuard interface using temporary config..."
    if ! wg-quick up "$temp_wg_conf"; then
        error "Failed to bring up WireGuard interface. Disconnecting..."
    fi

    log "ðŸš€ Connection established successfully!"
    health_check
}

main() {
    if [[ $EUID -ne 0 ]]; then
       error "This script must be run as root."
    fi
    if [[ ! -f "$WG_CONF" ]]; then
        error "WireGuard config not found at: $WG_CONF"
    fi

    TMP_DIR=$(mktemp -d)
    IPTABLES_STATE_FILE="$TMP_DIR/iptables.rules.state"
    setup_trap

    case "${1:-help}" in
        list) list_servers ;;
        connect)
            if [[ -z "${2:-}" ]]; then
                error "The 'connect' command requires a server ID. Use '$SCRIPT_NAME list' to find one."
            fi
            connect "$2"
            info "Connection is active. Press Ctrl+C to disconnect."
            while true; do sleep 86400; done
            ;;
        disconnect) disconnect ;;
        status) status ;;
        help|--help|-h) usage ;;
        *) error "Unknown command: $1"; usage ;;
    esac
}

main "$@"
